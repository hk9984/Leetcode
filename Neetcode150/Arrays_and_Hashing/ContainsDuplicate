/*

Given an integer array nums, return true if any value appears more than once in the array, otherwise return false

Example1: 
Input: nums = [1, 2, 3, 3]

Output: true

Example 2:
Input: nums = [1, 2, 3, 4]

Output: false


*/

/* 
Solution1: Sorting 

Time & Space Complexity
- Time complexity: O(nlogn)
- Space complexity: O(1) or O(n) depending on sorting algo
*/

import java.util.Arrays;

public class Solution {
    public boolean hasDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }
}

/*
 * 
 * Solution 2: HashSet
 * 
 * Time complexity: O(n)
 * Space complexity: O(n)
 */


class Solution {
    public boolean hasDuplicate(int[] nums) {

        Set<Integer> hset = new HashSet<Integer>();

        for(int num: nums) {
            if(hset.contains(num))
                return true;
            hset.add(num);
        }
        return false;
 
    }
}
